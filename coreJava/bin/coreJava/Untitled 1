IO流(输入流、输出流)
字节流、字符流
1、字节流
1)InputStream\OutputStream
	InputStream抽象了应用程序读取数据的方式
	OutputStream抽象了应用程序写出数据的方式
2)EOF = END  读到-1就读到结尾
3)输入流基本方法
  int b = in.read();读取一个字节无符号填充到int低八位，-1是EOF
  in.read(byte[]buf);读取数据填充到字节数组buf
  in.read(byte[]buf,int start,int size)读取数据填充到字节数组buf,从start位置开始填充，长度为size
  
 4)输出流基本方法
 	out.write(int b)写出一个byte到流，b的低八位
 	out.write(byte[]buf)将buf字节数组都写入流
 	out.write(byte[]buf,int start,int size) 字节数组buf从start位置开始写size长度的字节到流
 	
 5)FileInputStream---->具体实现了在文件上读取数据
 6)FileOutputStream    实现了向文件中写出byte数据的方法
 7)DataOutputStream/DataInputStream
 	对“流”功能的扩展，可以实现更加方便的读取int ，long ，字符等类型数据
 	DataOutputStream
 		writeInt()/writeDouble()/writeUTF()
 		
8)BufferedInputStream&BufferedOutputStream
 这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种流模式提高了IO的性能
 从应用程序把输入放入文件，相当于将一缸水倒入另一个缸中：
 FileOutputStream---->write()方法相当于一滴一滴的把水“转移”过去
 DataOutputStream--->writeXxx()方法会方便一些，相当于一瓢一瓢的把水“转移”过去
 BufferedOutputStream-->write方法更方便，相当于一瓢一瓢先放入桶中，再把桶中的水倒入另一个缸中，性能再次提高
 
 
 
 
 2、字符流
 1)编码问题
 2)认识文本文件
 Java的文本(char)是16位无符号整数，是字符的unicode编码(双字节编码)
 文件是byte byte byte...序列
 文本文件是文本(char)序列按照某种编码方案(utf-8,utf-16be,gbk)序列化为byte的存储结果
 3)字符流(Reader,Writer)----->操作的是文本文件
 字符的处理，一次处理一个字符
 字符的底层仍然是基本的字节序列
  InputStreamReader  完成byte解析流为char流，按照编码解析
  OutStreamWriter    提供char流到byte流，按照编码处理
  
  FileWriter/FileReader
  
  字符流过滤器
  BufferedReader ----> readLine 一次读一行
  BufferedWriter/PrintWriter   --->写一行
  
  
  
  3.对象的序列化和反序列化
    1).对象序列化，就是讲Object转换成Byte序列，反之叫反序列化
    2).序列化流(ObjectOutputStream),是过滤流---writeObject
    	反序列化流(ObjectInputStream)---readObject
    3).序列化接口(Serializable)
    对象必须实现序列化接口，才能进行序列化，否则会出现异常
    这个接口，没有任何方法，只是一个标准
  4).transient关键字   被transient修饰后不会被虚拟机(jvm)默认的虚拟化，但可以自己完成这个元素的序列化
  
  private void writeObject(java.io.ObjectOutputStream s)throws java.io.IOException{
		s.defaultWriteObject();//把虚拟机能默认序列化的元素进行序列化操作
		s.writeObject(stuAge);//自己完成stuAge的序列化
	}
  
  private void readObject(java.io.ObjectInputStream s)throws java.io.IOException,ClassNotFoundException{
		s.defaultReadObject();//把虚拟机默认能反序列化的元素进行反序列化操作
		this.stuAge = s.readInt();//自己完成stuAge的反序列化操作
		
  5).序列化中  子类和父类构造函数的调用问题
  
  对子类对象进行反序列化操作时，如果其父类没有实现序列化接口，那么其父类的构造函数会被调用
  
  